responses <- split_responses_demog(responses)
return (responses[OVERSEAEXP])
})
df.abroad_V <- df.resp_V %>%
select(subject, responses, variable_type) %>%
filter(variable_type == "demog_oversea_experience") %>%
mutate(lived_abroad = get_lived_abroad(responses)) %>%
mutate(oversea_exp = get_oversea_exp(responses))
df.lived_abroad_V <- df.abroad_V %>%
filter(lived_abroad == "Có")
ppts_lived_abroad_V = unique(df.lived_abroad_V$subject)
percent_dropped = length(ppts_lived_abroad_V) / length(unique(df.resp_V$subject))
percent_dropped #0.1369863
df.oversea_exp_V <- df.abroad_V %>%
filter(oversea_exp == "6 lần trở lên")
ppts_oversea_exp_V = unique(df.oversea_exp_V$subject) #77
percent_dropped = length(ppts_oversea_exp_V) / length(unique(df.resp_V$subject))
percent_dropped #0.1506849
df.resp_V <- df.resp_V %>%
filter(!(subject %in% ppts_non_native_lang_V),
!(subject %in% ppts_oversea_exp_V),
!(subject %in% ppts_zh_speaker_V),
!(subject %in% ppts_lived_abroad_V))
length(unique(df.resp_V$subject))
write.csv(df.resp_V, "../../data/dataVN_excl.csv")
library("papaja")
library("knitr") # for knitting things
library("tidyverse") # for all things tidyverse
library("car")
library("lme4")
library("patchwork")
library("effsize")
# these options here change the formatting of how comments are rendered
opts_chunk$set(
comment = "",
results = "hold",
fig.show = "hold")
# set the default ggplot theme
theme_set(theme_classic())
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
df.resp_E <- read.csv("../../data/dataUS_excl.csv") %>%
select(-X)
df.resp_V <- read.csv("../../data/dataVN_excl.csv") %>%
select(-X)
df.resp_M <- read.csv("../../data/dataCN_excl.csv") %>%
select(-X)
df.corpus_E <- read.csv("../../data/corpus/corpusE.csv") %>%
rename(tax_frequency_E = tax.frequency,
theme_frequency_E = theme.frequency,
tax_cosine_E = Tax.cosine_dist,
theme_cosine_E = Theme.cosine_dist,
tax_cosine_sim_E = Tax.cosine_sim,
theme_cosine_sim_E = Theme.cosine_sim,
tax_match_E = Tax.match,
theme_match_E = Theme.match,
cue_E = Cue)
df.corpus_V <- read.csv("../../data/corpus/corpusV.csv") %>%
rename(tax_frequency_V = tax.frequency,
theme_frequency_V = theme.frequency,
tax_cosine_V = Tax.cosine_dist,
theme_cosine_V = Theme.cosine_dist,
tax_cosine_sim_V = Tax.cosine_sim,
theme_cosine_sim_V = Theme.cosine_sim,
tax_match_V = Tax.match,
theme_match_V = Theme.match,
cue_V = Cue)
df.corpus_M <- read.csv("../../data/corpus/corpusM.csv") %>%
rename(tax_frequency_M = tax.frequency,
theme_frequency_M = theme.frequency,
tax_cosine_M = Tax.cosine_dist,
theme_cosine_M = Theme.cosine_dist,
tax_cosine_sim_M = Tax.cosine_sim,
theme_cosine_sim_M = Theme.cosine_sim,
tax_match_M = Tax.match,
theme_match_M = Theme.match,
cue_M = Cue)
df.corpus <- left_join(df.corpus_E, df.corpus_V, by = "Cue_renamed")
df.corpus <- left_join(df.corpus, df.corpus_M, by = "Cue_renamed")
#replacing any 0 raw counts with epsilon
df.corpus <- df.corpus %>%
mutate(tax_frequency_E = ifelse(tax_frequency_E == 0,
.Machine$double.eps, tax_frequency_E),
theme_frequency_E = ifelse(theme_frequency_E == 0,
.Machine$double.eps, theme_frequency_E),
tax_frequency_V = ifelse(tax_frequency_V == 0,
.Machine$double.eps, tax_frequency_V),
theme_frequency_V = ifelse(theme_frequency_V == 0,
.Machine$double.eps, theme_frequency_V))
#find triads_omit, used whenever analysis uses raw collocates
df.corpus_E_freq <- df.corpus_E %>%
select(Cue_renamed, cue_E, tax_match_E, theme_match_E, tax_frequency_E, theme_frequency_E)
corpus_E_omit <- df.corpus_E_freq %>%
filter(tax_frequency_E == 0 & theme_frequency_E == 0)
df.corpus_V_freq <- df.corpus_V %>%
select(Cue_renamed, cue_V, tax_match_V, theme_match_V, tax_frequency_V, theme_frequency_V)
corpus_V_omit <- df.corpus_V_freq %>%
filter(tax_frequency_V == 0 & theme_frequency_V == 0)
#Mandarin code
triads_omit <- append(corpus_E_omit$Cue_renamed, corpus_V_omit$Cue_renamed)
df.corpus_freq <- left_join(df.corpus_E_freq, df.corpus_V_freq, by = "Cue_renamed")
#mainly for sanity checking and so that there is a parallel df to df.corpus_freq
df.corpus_E_cos <- df.corpus_E %>%
select(Cue_renamed, cue_E, tax_match_E, theme_match_E,
tax_cosine_E, theme_cosine_E,
tax_cosine_sim_E, theme_cosine_sim_E)
df.corpus_V_cos <- df.corpus_V %>%
select(Cue_renamed, cue_V, tax_match_V, theme_match_V, tax_cosine_V, theme_cosine_V,
tax_cosine_sim_V, theme_cosine_sim_V)
df.corpus_M_cos <- df.corpus_M %>%
select(Cue_renamed, cue_M, tax_match_M, theme_match_M, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_M, theme_cosine_sim_M)
df.corpus_cos <- left_join(df.corpus_E_cos, df.corpus_V_cos, by = "Cue_renamed")
df.corpus_cos <- left_join(df.corpus_cos, df.corpus_M_cos, by = "Cue_renamed")
#combine response and corpus data
df.triad_E <- df.resp_E %>%
filter(stim_type == "triad",
responses != "NA")
triad_cues_E <- read.csv("../../data/corpus/cue_renamed_E.csv")
df.triad_E <- left_join(df.triad_E, triad_cues_E, by = c("cue", "top_opt", "bottom_opt"))
df.triad_E <- inner_join(df.triad_E, df.corpus, by = "Cue_renamed")
df.triad_E <- df.triad_E %>%
mutate(responses_theme = ifelse(responses == theme_match_E, 1, 0),
language = "English",
country = "US") %>%
select(subject, rt, Cue_renamed, cue, top_opt, bottom_opt,
responses, responses_theme, country, language,
tax_match_E, theme_match_E, tax_match_V, theme_match_V, tax_match_M, theme_match_M,
tax_frequency_E, theme_frequency_E, tax_frequency_V, theme_frequency_V, tax_frequency_M, theme_frequency_M,
tax_cosine_E, theme_cosine_E, tax_cosine_V, theme_cosine_V, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_E, theme_cosine_sim_E, tax_cosine_sim_V, theme_cosine_sim_V, tax_cosine_sim_M, theme_cosine_sim_M)
df.triad_V <- df.resp_V %>%
filter(stim_type == "triad",
responses != "NA")
triad_cues_V <- read.csv("../../data/corpus/cue_renamed_V.csv")
df.triad_V <- left_join(df.triad_V, triad_cues_V, by = c("cue", "top_opt", "bottom_opt"))
df.triad_V <- inner_join(df.triad_V, df.corpus, by = "Cue_renamed")
df.triad_V <- df.triad_V %>%
mutate(responses_theme = ifelse(responses == theme_match_V, 1, 0),
language = "Vietnamese",
country = "Vietnam") %>%
select(subject, rt, Cue_renamed, cue, top_opt, bottom_opt,
responses, responses_theme, country, language,
tax_match_E, theme_match_E, tax_match_V, theme_match_V, tax_match_M, theme_match_M,
tax_frequency_E, theme_frequency_E, tax_frequency_V, theme_frequency_V, tax_frequency_M, theme_frequency_M,
tax_cosine_E, theme_cosine_E, tax_cosine_V, theme_cosine_V, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_E, theme_cosine_sim_E, tax_cosine_sim_V, theme_cosine_sim_V, tax_cosine_sim_M, theme_cosine_sim_M)
df.triad_M <- df.resp_M %>%
filter(stim_type == "triad",
responses != "NA")
triad_cues_M <- read.csv("../../data/corpus/cue_renamed_M.csv")
df.triad_M <- left_join(df.triad_M, triad_cues_M, by = c("cue", "top_opt", "bottom_opt"))
df.triad_M <- inner_join(df.triad_M, df.corpus, by = "Cue_renamed")
df.triad_M <- df.triad_M %>%
mutate(responses_theme = ifelse(responses == theme_match_M, 1, 0),
language = "Mandarin",
country = "China") %>%
select(subject, rt, Cue_renamed, cue, top_opt, bottom_opt,
responses, responses_theme, country, language,
tax_match_E, theme_match_E, tax_match_V, theme_match_V, tax_match_M, theme_match_M,
tax_frequency_E, theme_frequency_E, tax_frequency_V, theme_frequency_V, tax_frequency_M, theme_frequency_M,
tax_cosine_E, theme_cosine_E, tax_cosine_V, theme_cosine_V, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_E, theme_cosine_sim_E, tax_cosine_sim_V, theme_cosine_sim_V, tax_cosine_sim_M, theme_cosine_sim_M)
#calculate proportion for raw frequencies and cosine distance
df <- rbind(df.triad_E, df.triad_V)
df <- rbind(df, df.triad_M) %>%
mutate(theme_freq_prop_E = theme_frequency_E / (theme_frequency_E + tax_frequency_E),
theme_freq_prop_V = theme_frequency_V / (theme_frequency_V + tax_frequency_V),
theme_freq_prop_M = theme_frequency_M / (theme_frequency_M + tax_frequency_M),
theme_cosine_prop_E = theme_cosine_E / (theme_cosine_E + tax_cosine_E),
theme_cosine_prop_V = theme_cosine_V / (theme_cosine_V + tax_cosine_V),
theme_cosine_prop_M = theme_cosine_M / (theme_cosine_M + tax_cosine_M)) %>%
rename(triad = Cue_renamed)
df_main_analysis <- df #keep a copy of df in case exploratory analysis changes it
write.csv(df_main_analysis, "../../data/data_USCNVN_ENZHVI.csv")
```{r setup, echo = FALSE, include = FALSE}
library("papaja")
library("knitr") # for knitting things
library("tidyverse") # for all things tidyverse
library("car")
library("lme4")
library("patchwork")
library("effsize")
# these options here change the formatting of how comments are rendered
opts_chunk$set(
comment = "",
results = "hold",
fig.show = "hold")
r_refs("r-references.bib")
r_refs("references/packages.bib")
df.corpus_E <- read.csv("../../data/corpus/corpusE.csv") %>%
rename(tax_frequency_E = tax.frequency,
theme_frequency_E = theme.frequency,
tax_cosine_E = Tax.cosine_dist,
theme_cosine_E = Theme.cosine_dist,
tax_cosine_sim_E = Tax.cosine_sim,
theme_cosine_sim_E = Theme.cosine_sim,
tax_match_E = Tax.match,
theme_match_E = Theme.match,
cue_E = Cue)
df.corpus_V <- read.csv("../../data/corpus/corpusV.csv") %>%
rename(tax_frequency_V = tax.frequency,
theme_frequency_V = theme.frequency,
tax_cosine_V = Tax.cosine_dist,
theme_cosine_V = Theme.cosine_dist,
tax_cosine_sim_V = Tax.cosine_sim,
theme_cosine_sim_V = Theme.cosine_sim,
tax_match_V = Tax.match,
theme_match_V = Theme.match,
cue_V = Cue)
df.corpus_M <- read.csv("../../data/corpus/corpusM_cos.csv") %>%
rename(tax_frequency_M = tax.frequency,
theme_frequency_M = theme.frequency,
tax_cosine_M = Tax.cosine_dist,
theme_cosine_M = Theme.cosine_dist,
tax_cosine_sim_M = Tax.cosine_sim,
theme_cosine_sim_M = Theme.cosine_sim,
tax_match_M = Tax.match,
theme_match_M = Theme.match,
cue_M = Cue)
df.corpus_E <- read.csv("../../data/corpus/corpusE.csv") %>%
rename(tax_frequency_E = tax.frequency,
theme_frequency_E = theme.frequency,
tax_cosine_E = Tax.cosine_dist,
theme_cosine_E = Theme.cosine_dist,
tax_cosine_sim_E = Tax.cosine_sim,
theme_cosine_sim_E = Theme.cosine_sim,
tax_match_E = Tax.match,
theme_match_E = Theme.match,
cue_E = Cue)
df.corpus_V <- read.csv("../../data/corpus/corpusV.csv") %>%
rename(tax_frequency_V = tax.frequency,
theme_frequency_V = theme.frequency,
tax_cosine_V = Tax.cosine_dist,
theme_cosine_V = Theme.cosine_dist,
tax_cosine_sim_V = Tax.cosine_sim,
theme_cosine_sim_V = Theme.cosine_sim,
tax_match_V = Tax.match,
theme_match_V = Theme.match,
cue_V = Cue)
df.corpus_M <- read.csv("../../data/corpus/corpusM.csv") %>%
rename(tax_frequency_M = tax.frequency,
theme_frequency_M = theme.frequency,
tax_cosine_M = Tax.cosine_dist,
theme_cosine_M = Theme.cosine_dist,
tax_cosine_sim_M = Tax.cosine_sim,
theme_cosine_sim_M = Theme.cosine_sim,
tax_match_M = Tax.match,
theme_match_M = Theme.match,
cue_M = Cue)
df.corpus <- left_join(df.corpus_E, df.corpus_V, by = "Cue_renamed")
df.corpus <- left_join(df.corpus, df.corpus_M, by = "Cue_renamed")
#replacing any 0 raw counts with epsilon
df.corpus <- df.corpus %>%
mutate(tax_frequency_E = ifelse(tax_frequency_E == 0,
.Machine$double.eps, tax_frequency_E),
theme_frequency_E = ifelse(theme_frequency_E == 0,
.Machine$double.eps, theme_frequency_E),
tax_frequency_V = ifelse(tax_frequency_V == 0,
.Machine$double.eps, tax_frequency_V),
theme_frequency_V = ifelse(theme_frequency_V == 0,
.Machine$double.eps, theme_frequency_V))
#find triads_omit, used whenever analysis uses raw collocates
df.corpus_E_freq <- df.corpus_E %>%
select(Cue_renamed, cue_E, tax_match_E, theme_match_E, tax_frequency_E, theme_frequency_E)
corpus_E_omit <- df.corpus_E_freq %>%
filter(tax_frequency_E == 0 & theme_frequency_E == 0)
df.corpus_V_freq <- df.corpus_V %>%
select(Cue_renamed, cue_V, tax_match_V, theme_match_V, tax_frequency_V, theme_frequency_V)
corpus_V_omit <- df.corpus_V_freq %>%
filter(tax_frequency_V == 0 & theme_frequency_V == 0)
triads_omit <- append(corpus_E_omit$Cue_renamed, corpus_V_omit$Cue_renamed)
df.corpus_freq <- left_join(df.corpus_E_freq, df.corpus_V_freq, by = "Cue_renamed")
#mainly for sanity checking and so that there is a parallel df to df.corpus_freq
df.corpus_E_cos <- df.corpus_E %>%
select(Cue_renamed, cue_E, tax_match_E, theme_match_E,
tax_cosine_E, theme_cosine_E,
tax_cosine_sim_E, theme_cosine_sim_E)
df.corpus_V_cos <- df.corpus_V %>%
select(Cue_renamed, cue_V, tax_match_V, theme_match_V, tax_cosine_V, theme_cosine_V,
tax_cosine_sim_V, theme_cosine_sim_V)
df.corpus_M_cos <- df.corpus_M %>%
select(Cue_renamed, cue_M, tax_match_M, theme_match_M, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_M, theme_cosine_sim_M)
df.corpus_cos <- left_join(df.corpus_E_cos, df.corpus_V_cos, by = "Cue_renamed")
df.corpus_cos <- left_join(df.corpus_cos, df.corpus_M_cos, by = "Cue_renamed")
#combine response and corpus data
df.triad_E <- df.resp_E %>%
filter(stim_type == "triad",
responses != "NA")
triad_cues_E <- read.csv("../../data/cue_renamed_E.csv")
df.corpus_M <- read.csv("../../data/corpus/corpusM.csv") %>%
rename(tax_frequency_M = tax.frequency,
theme_frequency_M = theme.frequency,
tax_cosine_M = Tax.cosine_dist,
theme_cosine_M = Theme.cosine_dist,
tax_cosine_sim_M = Tax.cosine_sim,
theme_cosine_sim_M = Theme.cosine_sim,
tax_match_M = Tax.match,
theme_match_M = Theme.match,
cue_M = Cue)
df.corpus <- left_join(df.corpus_E, df.corpus_V, by = "Cue_renamed")
df.corpus <- left_join(df.corpus, df.corpus_M, by = "Cue_renamed")
#replacing any 0 raw counts with epsilon
df.corpus <- df.corpus %>%
mutate(tax_frequency_E = ifelse(tax_frequency_E == 0,
.Machine$double.eps, tax_frequency_E),
theme_frequency_E = ifelse(theme_frequency_E == 0,
.Machine$double.eps, theme_frequency_E),
tax_frequency_V = ifelse(tax_frequency_V == 0,
.Machine$double.eps, tax_frequency_V),
theme_frequency_V = ifelse(theme_frequency_V == 0,
.Machine$double.eps, theme_frequency_V))
#find triads_omit, used whenever analysis uses raw collocates
df.corpus_E_freq <- df.corpus_E %>%
select(Cue_renamed, cue_E, tax_match_E, theme_match_E, tax_frequency_E, theme_frequency_E)
corpus_E_omit <- df.corpus_E_freq %>%
filter(tax_frequency_E == 0 & theme_frequency_E == 0)
df.corpus_V_freq <- df.corpus_V %>%
select(Cue_renamed, cue_V, tax_match_V, theme_match_V, tax_frequency_V, theme_frequency_V)
corpus_V_omit <- df.corpus_V_freq %>%
filter(tax_frequency_V == 0 & theme_frequency_V == 0)
triads_omit <- append(corpus_E_omit$Cue_renamed, corpus_V_omit$Cue_renamed)
df.corpus_freq <- left_join(df.corpus_E_freq, df.corpus_V_freq, by = "Cue_renamed")
#mainly for sanity checking and so that there is a parallel df to df.corpus_freq
df.corpus_E_cos <- df.corpus_E %>%
select(Cue_renamed, cue_E, tax_match_E, theme_match_E,
tax_cosine_E, theme_cosine_E,
tax_cosine_sim_E, theme_cosine_sim_E)
df.corpus_V_cos <- df.corpus_V %>%
select(Cue_renamed, cue_V, tax_match_V, theme_match_V, tax_cosine_V, theme_cosine_V,
tax_cosine_sim_V, theme_cosine_sim_V)
df.corpus_M_cos <- df.corpus_M %>%
select(Cue_renamed, cue_M, tax_match_M, theme_match_M, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_M, theme_cosine_sim_M)
df.corpus_cos <- left_join(df.corpus_E_cos, df.corpus_V_cos, by = "Cue_renamed")
df.corpus_cos <- left_join(df.corpus_cos, df.corpus_M_cos, by = "Cue_renamed")
#mainly for sanity checking and so that there is a parallel df to df.corpus_freq
df.corpus_E_cos <- df.corpus_E %>%
select(Cue_renamed, cue_E, tax_match_E, theme_match_E,
tax_cosine_E, theme_cosine_E,
tax_cosine_sim_E, theme_cosine_sim_E)
df.corpus_V_cos <- df.corpus_V %>%
select(Cue_renamed, cue_V, tax_match_V, theme_match_V, tax_cosine_V, theme_cosine_V,
tax_cosine_sim_V, theme_cosine_sim_V)
df.corpus_M_cos <- df.corpus_M %>%
select(Cue_renamed, cue_M, tax_match_M, theme_match_M, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_M, theme_cosine_sim_M)
df.corpus_cos <- left_join(df.corpus_E_cos, df.corpus_V_cos, by = "Cue_renamed")
df.corpus_cos <- left_join(df.corpus_cos, df.corpus_M_cos, by = "Cue_renamed")
#combine response and corpus data
df.triad_E <- df.resp_E %>%
filter(stim_type == "triad",
responses != "NA")
triad_cues_E <- read.csv("../../data/corpus/cue_renamed_E.csv")
df.triad_E <- left_join(df.triad_E, triad_cues_E, by = c("cue", "top_opt", "bottom_opt"))
df.triad_E <- inner_join(df.triad_E, df.corpus, by = "Cue_renamed")
df.triad_E <- df.triad_E %>%
mutate(responses_theme = ifelse(responses == theme_match_E, 1, 0),
language = "English",
country = "US") %>%
select(subject, rt, Cue_renamed, cue, top_opt, bottom_opt,
responses, responses_theme, country, language,
tax_match_E, theme_match_E, tax_match_V, theme_match_V, tax_match_M, theme_match_M,
tax_frequency_E, theme_frequency_E, tax_frequency_V, theme_frequency_V, tax_frequency_M, theme_frequency_M,
tax_cosine_E, theme_cosine_E, tax_cosine_V, theme_cosine_V, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_E, theme_cosine_sim_E, tax_cosine_sim_V, theme_cosine_sim_V, tax_cosine_sim_M, theme_cosine_sim_M)
df.triad_V <- df.resp_V %>%
filter(stim_type == "triad",
responses != "NA")
triad_cues_V <- read.csv("../../data/corpus/cue_renamed_V.csv")
df.triad_V <- left_join(df.triad_V, triad_cues_V, by = c("cue", "top_opt", "bottom_opt"))
df.triad_V <- inner_join(df.triad_V, df.corpus, by = "Cue_renamed")
df.triad_V <- df.triad_V %>%
mutate(responses_theme = ifelse(responses == theme_match_V, 1, 0),
language = "Vietnamese",
country = "Vietnam") %>%
select(subject, rt, Cue_renamed, cue, top_opt, bottom_opt,
responses, responses_theme, country, language,
tax_match_E, theme_match_E, tax_match_V, theme_match_V, tax_match_M, theme_match_M,
tax_frequency_E, theme_frequency_E, tax_frequency_V, theme_frequency_V, tax_frequency_M, theme_frequency_M,
tax_cosine_E, theme_cosine_E, tax_cosine_V, theme_cosine_V, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_E, theme_cosine_sim_E, tax_cosine_sim_V, theme_cosine_sim_V, tax_cosine_sim_M, theme_cosine_sim_M)
df.triad_M <- df.resp_M %>%
filter(stim_type == "triad",
responses != "NA")
triad_cues_M <- read.csv("../../data/corpus/cue_renamed_M.csv")
df.triad_M <- left_join(df.triad_M, triad_cues_M, by = c("cue", "top_opt", "bottom_opt"))
df.triad_M <- inner_join(df.triad_M, df.corpus, by = "Cue_renamed")
df.triad_M <- df.triad_M %>%
mutate(responses_theme = ifelse(responses == theme_match_M, 1, 0),
language = "Mandarin",
country = "China") %>%
select(subject, rt, Cue_renamed, cue, top_opt, bottom_opt,
responses, responses_theme, country, language,
tax_match_E, theme_match_E, tax_match_V, theme_match_V, tax_match_M, theme_match_M,
tax_frequency_E, theme_frequency_E, tax_frequency_V, theme_frequency_V, tax_frequency_M, theme_frequency_M,
tax_cosine_E, theme_cosine_E, tax_cosine_V, theme_cosine_V, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_E, theme_cosine_sim_E, tax_cosine_sim_V, theme_cosine_sim_V, tax_cosine_sim_M, theme_cosine_sim_M)
#calculate proportion for raw frequencies and cosine distance
df <- rbind(df.triad_E, df.triad_V)
df <- rbind(df, df.triad_M) %>%
mutate(theme_freq_prop_E = theme_frequency_E / (theme_frequency_E + tax_frequency_E),
theme_freq_prop_V = theme_frequency_V / (theme_frequency_V + tax_frequency_V),
theme_freq_prop_M = theme_frequency_M / (theme_frequency_M + tax_frequency_M),
theme_cosine_prop_E = theme_cosine_E / (theme_cosine_E + tax_cosine_E),
theme_cosine_prop_V = theme_cosine_V / (theme_cosine_V + tax_cosine_V),
theme_cosine_prop_M = theme_cosine_M / (theme_cosine_M + tax_cosine_M)) %>%
rename(triad = Cue_renamed)
df.country <- df %>%
group_by(subject, country) %>%
summarize(theme_resp_percent = mean(responses_theme, na.rm = T))
df.country_sum <- df.country %>%
group_by(country) %>%
summarize(mean_theme_resp_percent = mean(theme_resp_percent),
sd_theme_resp_percent = sd(theme_resp_percent))
fit.country = glmer(responses_theme ~ country + (1 | subject) + (country | triad),
data = df,
family = "binomial")
summary(fit.country)
fit.country.anova = Anova(fit.country, type=3)
fit.country_EN_VN = glmer(responses_theme ~ country + (1 | subject) + (country | triad),
data = df %>% filter(country != "China"),
family = "binomial")
summary(fit.country_EN_VN)
ggplot(df.country,
mapping = aes(x = country,
y = theme_resp_percent,
color = country)) +
geom_violin() +
geom_jitter(height = 0,
alpha = 0.3) +
stat_summary(fun.data = "mean_cl_boot",
geom = "pointrange") +
labs(y = "Proportion Thematic Chosen",
x = "Country",
color = "Country") +
scale_color_manual(values=c("#D63230", "#1C77C3", "#F39237"))
fit.country_no_triad <- glmer(responses_theme ~ country + (1 | subject),
data = df_main_analysis,
family = "binomial")
fit.country = glmer(responses_theme ~ country + (1 | subject) + (country | triad),
data = df_main_analysis,
family = "binomial")
summary(fit.country)
fit.no_triad_compare <- anova(fit.country, fit.country_no_triad, type = 3)
df.country_item <- df_main_analysis %>%
filter(triad == "hair")
plot.hair <- ggplot(df.country_item,
mapping = aes(x = factor(country, levels=c("China", "US", "Vietnam")),
y = responses_theme,
color = factor(country, levels=c("China", "US", "Vietnam")))) +
geom_jitter(stat = "identity", alpha  = .5) +
labs(y = "Proportion Thematic Chosen (hair: beard / comb)",
x = "Country",
color = "Country") +
stat_summary(fun.data = "mean_cl_boot",
geom = "pointrange") +
scale_y_continuous(limits=c(0.0, 1.0), oob = scales::squish) +
scale_fill_manual(values=c("#D63230", "#1C77C3", "#F39237")) +
scale_color_manual(values=c("#D63230", "#1C77C3", "#F39237"))  +
theme(axis.title = element_text(size=rel(0.75)))
df.country_item <- df_main_analysis %>%
filter(triad == "spoon2")
plot.spoon2 <- ggplot(df.country_item,
mapping = aes(x = factor(country, levels=c("China", "US", "Vietnam")),
y = responses_theme,
color = factor(country, levels=c("China", "US", "Vietnam")))) +
geom_jitter(stat = "identity", alpha  = .5) +
labs(y = "Proportion Thematic Chosen (spoon: fork / sugar)",
x = "Country",
color = "Country") +
stat_summary(fun.data = "mean_cl_boot",
geom = "pointrange") +
scale_y_continuous(limits=c(0.0, 1.0), oob = scales::squish) +
scale_fill_manual(values=c("#D63230", "#1C77C3", "#F39237")) +
scale_color_manual(values=c("#D63230", "#1C77C3", "#F39237")) +
theme(legend.position = "none") +
theme(axis.title = element_text(size=rel(0.75)))
#show 1 triad
df.country_item <- df_main_analysis %>%
filter(triad == "cow2")
df.country_item_summ <- df_main_analysis %>%
group_by(triad, country) %>%
summarize(theme_resp_percent = mean(responses_theme, na.rm = T)) %>%
filter(triad == "cow2")
plot.cow2 <- ggplot(df.country_item,
mapping = aes(x = factor(country, levels=c("China", "US", "Vietnam")),
y = responses_theme,
color = factor(country, levels=c("China", "US", "Vietnam")))) +
geom_jitter(stat = "identity", alpha  = .5) +
labs(y = "Proportion Thematic Chosen (cow: chicken / grass)",
x = "Country",
color = "Country") +
stat_summary(fun.data = "mean_cl_boot",
geom = "pointrange") +
scale_y_continuous(limits=c(0.0, 1.0), oob = scales::squish) +
scale_fill_manual(values=c("#D63230", "#1C77C3", "#F39237")) +
scale_color_manual(values=c("#D63230", "#1C77C3", "#F39237")) +
theme(legend.position = "none") +
theme(axis.title = element_text(size=rel(0.75)))
#
# +
#   geom_bar(data = df.country_item_summ,
#            mapping = aes(x = factor(country, levels=c("China", "US", "Vietnam")),
#                           y = theme_resp_percent,
#                          color = factor(country, levels=c("China", "US", "Vietnam"))),
#            stat='identity', alpha = .3,
#            fill=c("#D63230", "#1C77C3", "#F39237"))
plot.cow2 + plot.spoon2 + plot.hair +
plot_layout(ncol = 3)

theme_cosine_V = Theme.cosine_dist,
tax_match_V = Tax.match,
theme_match_V = Theme.match,
cue_V = Cue)
df.corpus_M <- read.csv("../../data/corpus/corpusM.csv") %>%
rename(tax_frequency_M = tax.frequency,
theme_frequency_M = theme.frequency,
tax_cosine_M = Tax.cosine_dist,
theme_cosine_M = Theme.cosine_dist,
tax_match_M = Tax.match,
theme_match_M = Theme.match,
cue_M = Cue)
#find triads_omit, used whenever analysis uses raw collocates
df.corpus_E_freq <- df.corpus_E %>%
select(Cue_renamed, cue_E, tax_match_E, theme_match_E, tax_frequency_E, theme_frequency_E)
corpus_E_omit <- df.corpus_E_freq %>%
filter(tax_frequency_E == 0 & theme_frequency_E == 0)
df.corpus_V_freq <- df.corpus_V %>%
select(Cue_renamed, cue_V, tax_match_V, theme_match_V, tax_frequency_V, theme_frequency_V)
corpus_V_omit <- df.corpus_V_freq %>%
filter(tax_frequency_V == 0 & theme_frequency_V == 0)
triads_omit <- append(corpus_E_omit$Cue_renamed, corpus_V_omit$Cue_renamed)
df.corpus_freq <- left_join(df.corpus_E_freq, df.corpus_V_freq, by = "Cue_renamed")
df.resp_E <- read.csv("../../data/dataUS_excl.csv") %>%
select(-X)
demog <- c("demog-dropdown", "demog-multi-choice", "demog-free-response", "demog-multi-select")
df.demog_E <- df.resp_E %>%
filter(trial_type %in% demog)
#write.csv(data_demog, "data_anon_demog_0201.csv")
AGE = 97 #index for age answer
GENDER = 115 #index for gender answer
split_responses <- function(responses) {
responses <- as.character(responses)
response_list <- unlist(strsplit(responses, ',|:'))
response_list <- response_list[seq(1, length(response_list))]
response_list <- gsub("}", "", response_list)
response_list <- gsub("\"", "", response_list)
return(response_list)
}
get_age <- Vectorize(function(responses) {
responses <- split_responses(responses)
if(responses[AGE-1] != "A0") {warnings("cannot find age answer")}
else{return (responses[AGE])}
})
get_gender <- Vectorize(function(responses) {
responses <- split_responses(responses)
if(responses[GENDER-1] != "A1") {warnings("cannot find gender answer")}
else{return (responses[GENDER])}
})
df.age_gender_E <- df.demog_E %>%
filter(variable_type == "demog_age_gender_ethnic") %>%
select(subject, responses) %>%
mutate(age = as.numeric(get_age(responses))) %>%
mutate(age = as.numeric(age)) %>%
mutate(gender = get_gender(responses))
df.age_gender_E_summ <- df.age_gender_E %>%
summarize(mean_age = mean(age),
median_age = median(age),
sd_age = sd(age))
df.resp_V <- read.csv("../../data/dataVN_excl.csv") %>%
select(-X)
demog <- c("demog-dropdown", "demog-multi-choice", "demog-free-response", "demog-multi-select")
df.demog_V <- df.resp_V %>%
filter(trial_type %in% demog)
AGE = 97 #index for age answer
GENDER = 115 #index for gender answer
split_responses <- function(responses) {
responses <- as.character(responses)
response_list <- unlist(strsplit(responses, ',|:'))
response_list <- response_list[seq(1, length(response_list))]
response_list <- gsub("}", "", response_list)
response_list <- gsub("\"", "", response_list)
return(response_list)
}
get_age <- Vectorize(function(responses) {
responses <- split_responses(responses)
if(responses[AGE-1] != "A0") {warnings("cannot find age answer")}
else{return (responses[AGE])}
})
get_gender <- Vectorize(function(responses) {
responses <- split_responses(responses)
if(responses[GENDER-1] != "A1") {warnings("cannot find gender answer")}
else{return (responses[GENDER])}
})
df.age_gender_V <- df.demog_V %>%
filter(variable_type == "demog_age_gender_ethnic") %>%
select(subject, responses) %>%
mutate(age = as.numeric(get_age(responses))) %>%
mutate(age = as.numeric(age)) %>%
mutate(gender = get_gender(responses))
df.age_gender_V_summ <- df.age_gender_V %>%
summarize(mean_age = mean(age),
median_age = median(age),
sd_age = sd(age))
df.resp_M <- read.csv("../../data/dataCN_excl.csv") %>%
select(-X)
demog <- c("demog-dropdown", "demog-multi-choice", "demog-free-response", "demog-multi-select")
df.demog_M <- df.resp_M %>%
filter(trial_type %in% demog)
#write.csv(data_demog, "data_anon_demog_0201.csv")
AGE = 97 #index for age answer
GENDER = 115 #index for gender answer
split_responses <- function(responses) {
responses <- as.character(responses)
response_list <- unlist(strsplit(responses, ',|:'))
response_list <- response_list[seq(1, length(response_list))]
response_list <- gsub("}", "", response_list)
response_list <- gsub("\"", "", response_list)
return(response_list)
}
get_age <- Vectorize(function(responses) {
responses <- split_responses(responses)
if(responses[AGE-1] != "A0") {warnings("cannot find age answer")}
else{return (responses[AGE])}
})
get_gender <- Vectorize(function(responses) {
responses <- split_responses(responses)
if(responses[GENDER-1] != "A1") {warnings("cannot find gender answer")}
else{return (responses[GENDER])}
})
df.age_gender_M <- df.demog_M %>%
filter(variable_type == "demog_age_gender_ethnic") %>%
select(subject, responses) %>%
mutate(age = as.numeric(get_age(responses))) %>%
mutate(age = as.numeric(age)) %>%
mutate(gender = get_gender(responses))
df.age_gender_M_summ <- df.age_gender_M %>%
summarize(mean_age = mean(age),
median_age = median(age),
sd_age = sd(age))
df.country <- df %>%
group_by(subject, country) %>%
summarize(theme_resp_percent = mean(responses_theme, na.rm = T))
#calculate mean and SD for reporting
df.country_sum <- df.country %>%
group_by(country) %>%
summarize(mean_theme_resp_percent = mean(theme_resp_percent),
sd_theme_resp_percent = sd(theme_resp_percent))
#linear mixed model
fit.country = glmer(responses_theme ~ country + (1 | subject) + (country | triad),
data = df,
family = "binomial")
summary(fit.country)
#ANOVA
fit.country.anova = Anova(fit.country, type=3)
#linear mixed model without China, showing that significance is driven by China responding
fit.country_EN_VN = glmer(responses_theme ~ country + (1 | subject) + (country | triad),
data = df %>% filter(country != "China"),
family = "binomial")
summary(fit.country_EN_VN)
#show violin plot of responding of 3 countries
ggplot(df.country,
mapping = aes(x = factor(country, levels=c("China", "US", "Vietnam")),
y = theme_resp_percent,
color = factor(country, levels=c("China", "US", "Vietnam")))) +
geom_violin() +
geom_jitter(height = 0,
alpha = 0.3) +
stat_summary(fun.data = "mean_cl_boot",
geom = "pointrange") +
labs(y = "Proportion Thematic Chosen",
x = "Country",
color = "Country") +
scale_color_manual(values=c("#D63230", "#1C77C3", "#F39237"))
#show plots of correlation between country responses
df.triad_country <- df %>%
group_by(triad, country) %>%
summarize(emp_theme_prop = mean(responses_theme))
df.triad_country <- pivot_wider(data = df.triad_country,
names_from = country,
values_from = emp_theme_prop)
#correlation between US-China responding
plotUSCN = ggplot(data = df.triad_country,
mapping = aes(x = US,
y = China,
label = triad)) +
geom_text() +
geom_smooth(method = "lm") +
labs(x = "Proportion Thematic Chosen (US)",
y = "Proportion Thematic Chosen (China)") +
xlim(0, 1) +
ylim(0, 1) +
theme(axis.title = element_text(size=rel(0.75)))
#correlation between US-Vietnam responding
plotUSVN = ggplot(data = df.triad_country,
mapping = aes(x = US,
y = Vietnam,
label = triad)) +
geom_text() +
geom_smooth(method = "lm") +
labs(x = "Proportion Thematic Chosen (US)",
y = "Proportion Thematic Chosen (Vietnam)") +
xlim(0, 1) +
ylim(0, 1)  +
theme(axis.title = element_text(size=rel(0.75)))
#correlation between China-Vietnam responding
plotCNVN = ggplot(data = df.triad_country,
mapping = aes(x = Vietnam,
y = China,
label = triad)) +
geom_text() +
geom_smooth(method = "lm") +
labs(x = "Proportion Thematic Chosen (Vietnam)",
y = "Proportion Thematic Chosen (China)") +
xlim(0, 1) +
ylim(0, 1)  +
theme(axis.title = element_text(size=rel(0.75)))
#run Pearson correlation test pairwise
corr.USCN = apa_print(cor.test(df.triad_country$US,
df.triad_country$China, na.rm=T))
corr.USVN = apa_print(cor.test(df.triad_country$US,
df.triad_country$Vietnam, na.rm=T))
corr.CNVN = apa_print(cor.test(df.triad_country$China,
df.triad_country$Vietnam, na.rm=T))
plotUSCN + plotUSVN + plotCNVN +
plot_layout(ncol = 3)
#calculate Cohen's d between US-China responding
USCN_cohen <- cohen.d(df.triad_country$China, df.triad_country$US)
# #raw co-occurrences
# df.triad_country_freq <- df %>%
#   filter(!(triad %in% triads_omit)) %>% # omit triads that do not have meaningful prediction (at least 1 non-zero prediction in both languages)
#   group_by(triad, country, theme_freq_prop_E, theme_freq_prop_V) %>%
#   summarize(emp_theme_prop = mean(responses_theme))
#
# df.triad_country_freq_E <- df.triad_country_freq %>%
#   filter(country == "US")
#
# #plotting English corpus against US responding data
# plotE = ggplot(data = df.triad_country_freq_E,
#         mapping = aes(x = emp_theme_prop,
#                      y = theme_freq_prop_E,
#                      label = triad)) +
#    geom_text() +
#    geom_smooth(method = "lm") +
#    labs(x = "Proportion Thematic Chosen (US)",
#         y = "Proportion Thematic Predicted (English)")
#
# df.triad_country_freq_V <- df.triad_country_freq %>%
#   filter(country == "Vietnam")
#
# #plotting Vietnamese corpus against VN responding data
# plotV = ggplot(data = df.triad_country_freq_V,
#         mapping = aes(x = emp_theme_prop,
#                      y = theme_freq_prop_V,
#                      label = triad)) +
#    geom_text() +
#    geom_smooth(method = "lm") +
#    labs(x = "Proportion Thematic Chosen (Vietnam)",
#         y = "Proportion Thematic Predicted (Vietnamese)")
#
# #Pearson correlation between corpus and responding
# corr.E = apa_print(cor.test(df.triad_country_freq_E$emp_theme_prop,
#                   df.triad_country_freq_E$theme_freq_prop_E, na.rm=T))
#
# corr.V = apa_print(cor.test(df.triad_country_freq_V$emp_theme_prop,
#                   df.triad_country_freq_V$theme_freq_prop_V, na.rm=T))
#
# #Pearson correlation between EN and VI corpus
# corr.EV = apa_print(cor.test(df.triad_country_freq_V$theme_freq_prop_V,
#                    df.triad_country_freq_E$theme_freq_prop_E, na.rm=T))
library("papaja")
library("knitr") # for knitting things
library("tidyverse") # for all things tidyverse
library("car")
library("lme4")
library("patchwork")
library("effsize")
# these options here change the formatting of how comments are rendered
opts_chunk$set(
comment = "",
results = "hold",
fig.show = "hold")
# set the default ggplot theme
theme_set(theme_classic())
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
df.resp_E <- read.csv("../../data/dataUS_excl.csv") %>%
select(-X)
df.resp_V <- read.csv("../../data/dataVN_excl.csv") %>%
select(-X)
df.resp_M <- read.csv("../../data/dataCN_excl.csv") %>%
select(-X)
df.corpus_E <- read.csv("../../data/corpus/corpusE.csv") %>%
rename(tax_frequency_E = tax.frequency,
theme_frequency_E = theme.frequency,
tax_cosine_E = Tax.cosine_dist,
theme_cosine_E = Theme.cosine_dist,
tax_cosine_sim_E = Tax.cosine_sim,
theme_cosine_sim_E = Theme.cosine_sim,
tax_match_E = Tax.match,
theme_match_E = Theme.match,
cue_E = Cue)
df.corpus_V <- read.csv("../../data/corpus/corpusV.csv") %>%
rename(tax_frequency_V = tax.frequency,
theme_frequency_V = theme.frequency,
tax_cosine_V = Tax.cosine_dist,
theme_cosine_V = Theme.cosine_dist,
tax_cosine_sim_V = Tax.cosine_sim,
theme_cosine_sim_V = Theme.cosine_sim,
tax_match_V = Tax.match,
theme_match_V = Theme.match,
cue_V = Cue)
df.corpus_M <- read.csv("../../data/corpus/corpusM.csv") %>%
rename(tax_frequency_M = tax.frequency,
theme_frequency_M = theme.frequency,
tax_cosine_M = Tax.cosine_dist,
theme_cosine_M = Theme.cosine_dist,
tax_cosine_sim_M = Tax.cosine_sim,
theme_cosine_sim_M = Theme.cosine_sim,
tax_match_M = Tax.match,
theme_match_M = Theme.match,
cue_M = Cue)
df.corpus <- left_join(df.corpus_E, df.corpus_V, by = "Cue_renamed")
df.corpus <- left_join(df.corpus, df.corpus_M, by = "Cue_renamed")
#replacing any 0 raw counts with epsilon
df.corpus <- df.corpus %>%
mutate(tax_frequency_E = ifelse(tax_frequency_E == 0,
.Machine$double.eps, tax_frequency_E),
theme_frequency_E = ifelse(theme_frequency_E == 0,
.Machine$double.eps, theme_frequency_E),
tax_frequency_V = ifelse(tax_frequency_V == 0,
.Machine$double.eps, tax_frequency_V),
theme_frequency_V = ifelse(theme_frequency_V == 0,
.Machine$double.eps, theme_frequency_V),
tax_frequency_M = ifelse(tax_frequency_M == 0,
.Machine$double.eps, tax_frequency_M),
theme_frequency_M = ifelse(theme_frequency_M == 0,
.Machine$double.eps, theme_frequency_M)
)
#find triads_omit, used whenever analysis uses raw collocates
df.corpus_E_freq <- df.corpus_E %>%
select(Cue_renamed, cue_E, tax_match_E, theme_match_E, tax_frequency_E, theme_frequency_E)
corpus_E_omit <- df.corpus_E_freq %>%
filter(tax_frequency_E == 0 & theme_frequency_E == 0)
df.corpus_V_freq <- df.corpus_V %>%
select(Cue_renamed, cue_V, tax_match_V, theme_match_V, tax_frequency_V, theme_frequency_V)
corpus_V_omit <- df.corpus_V_freq %>%
filter(tax_frequency_V == 0 & theme_frequency_V == 0)
df.corpus_M_freq <- df.corpus_M %>%
select(Cue_renamed, cue_M, tax_match_M, theme_match_M, tax_frequency_M, theme_frequency_M)
corpus_M_omit <- df.corpus_M_freq %>%
filter(tax_frequency_M == 0 & theme_frequency_M == 0)
#Mandarin code
triads_omit <- append(corpus_E_omit$Cue_renamed,
corpus_V_omit$Cue_renamed,
corpus_M_omit$Cue_renamed)
library("papaja")
library("knitr") # for knitting things
library("tidyverse") # for all things tidyverse
library("car")
library("lme4")
library("patchwork")
library("effsize")
# these options here change the formatting of how comments are rendered
opts_chunk$set(
comment = "",
results = "hold",
fig.show = "hold")
# set the default ggplot theme
theme_set(theme_classic())
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
df.resp_E <- read.csv("../../data/dataUS_excl.csv") %>%
select(-X)
df.resp_V <- read.csv("../../data/dataVN_excl.csv") %>%
select(-X)
df.resp_M <- read.csv("../../data/dataCN_excl.csv") %>%
select(-X)
df.corpus_E <- read.csv("../../data/corpus/corpusE.csv") %>%
rename(tax_frequency_E = tax.frequency,
theme_frequency_E = theme.frequency,
tax_cosine_E = Tax.cosine_dist,
theme_cosine_E = Theme.cosine_dist,
tax_cosine_sim_E = Tax.cosine_sim,
theme_cosine_sim_E = Theme.cosine_sim,
tax_match_E = Tax.match,
theme_match_E = Theme.match,
cue_E = Cue)
df.corpus_V <- read.csv("../../data/corpus/corpusV.csv") %>%
rename(tax_frequency_V = tax.frequency,
theme_frequency_V = theme.frequency,
tax_cosine_V = Tax.cosine_dist,
theme_cosine_V = Theme.cosine_dist,
tax_cosine_sim_V = Tax.cosine_sim,
theme_cosine_sim_V = Theme.cosine_sim,
tax_match_V = Tax.match,
theme_match_V = Theme.match,
cue_V = Cue)
df.corpus_M <- read.csv("../../data/corpus/corpusM.csv") %>%
rename(tax_frequency_M = tax.frequency,
theme_frequency_M = theme.frequency,
tax_cosine_M = Tax.cosine_dist,
theme_cosine_M = Theme.cosine_dist,
tax_cosine_sim_M = Tax.cosine_sim,
theme_cosine_sim_M = Theme.cosine_sim,
tax_match_M = Tax.match,
theme_match_M = Theme.match,
cue_M = Cue)
df.corpus <- left_join(df.corpus_E, df.corpus_V, by = "Cue_renamed")
df.corpus <- left_join(df.corpus, df.corpus_M, by = "Cue_renamed")
#replacing any 0 raw counts with epsilon
df.corpus <- df.corpus %>%
mutate(tax_frequency_E = ifelse(tax_frequency_E == 0,
.Machine$double.eps, tax_frequency_E),
theme_frequency_E = ifelse(theme_frequency_E == 0,
.Machine$double.eps, theme_frequency_E),
tax_frequency_V = ifelse(tax_frequency_V == 0,
.Machine$double.eps, tax_frequency_V),
theme_frequency_V = ifelse(theme_frequency_V == 0,
.Machine$double.eps, theme_frequency_V),
tax_frequency_M = ifelse(tax_frequency_M == 0,
.Machine$double.eps, tax_frequency_M),
theme_frequency_M = ifelse(theme_frequency_M == 0,
.Machine$double.eps, theme_frequency_M)
)
#find triads_omit, used whenever analysis uses raw collocates
df.corpus_E_freq <- df.corpus_E %>%
select(Cue_renamed, cue_E, tax_match_E, theme_match_E, tax_frequency_E, theme_frequency_E)
corpus_E_omit <- df.corpus_E_freq %>%
filter(tax_frequency_E == 0 & theme_frequency_E == 0)
df.corpus_V_freq <- df.corpus_V %>%
select(Cue_renamed, cue_V, tax_match_V, theme_match_V, tax_frequency_V, theme_frequency_V)
corpus_V_omit <- df.corpus_V_freq %>%
filter(tax_frequency_V == 0 & theme_frequency_V == 0)
df.corpus_M_freq <- df.corpus_M %>%
select(Cue_renamed, cue_M, tax_match_M, theme_match_M, tax_frequency_M, theme_frequency_M)
corpus_M_omit <- df.corpus_M_freq %>%
filter(tax_frequency_M == 0 & theme_frequency_M == 0)
triads_omit <- append(corpus_E_omit$Cue_renamed,
corpus_V_omit$Cue_renamed)
triads_omit <- append(triads_omit,
corpus_M_omit$Cue_renamed)
df.corpus_freq <- left_join(df.corpus_E_freq,
df.corpus_V_freq,
df.corpus_M_freq,
by = "Cue_renamed")
#mainly for sanity checking and so that there is a parallel df to df.corpus_freq
df.corpus_E_cos <- df.corpus_E %>%
select(Cue_renamed, cue_E, tax_match_E, theme_match_E,
tax_cosine_E, theme_cosine_E,
tax_cosine_sim_E, theme_cosine_sim_E)
df.corpus_V_cos <- df.corpus_V %>%
select(Cue_renamed, cue_V, tax_match_V, theme_match_V, tax_cosine_V, theme_cosine_V,
tax_cosine_sim_V, theme_cosine_sim_V)
df.corpus_M_cos <- df.corpus_M %>%
select(Cue_renamed, cue_M, tax_match_M, theme_match_M, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_M, theme_cosine_sim_M)
df.corpus_cos <- left_join(df.corpus_E_cos, df.corpus_V_cos, by = "Cue_renamed")
df.corpus_cos <- left_join(df.corpus_cos, df.corpus_M_cos, by = "Cue_renamed")
#combine response and corpus data
df.triad_E <- df.resp_E %>%
filter(stim_type == "triad",
responses != "NA")
triad_cues_E <- read.csv("../../data/corpus/cue_renamed_E.csv")
df.triad_E <- left_join(df.triad_E, triad_cues_E, by = c("cue", "top_opt", "bottom_opt"))
df.triad_E <- inner_join(df.triad_E, df.corpus, by = "Cue_renamed")
df.triad_E <- df.triad_E %>%
mutate(responses_theme = ifelse(responses == theme_match_E, 1, 0),
language = "English",
country = "US") %>%
select(subject, rt, Cue_renamed, cue, top_opt, bottom_opt,
responses, responses_theme, country, language,
tax_match_E, theme_match_E, tax_match_V, theme_match_V, tax_match_M, theme_match_M,
tax_frequency_E, theme_frequency_E, tax_frequency_V, theme_frequency_V, tax_frequency_M, theme_frequency_M,
tax_cosine_E, theme_cosine_E, tax_cosine_V, theme_cosine_V, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_E, theme_cosine_sim_E, tax_cosine_sim_V, theme_cosine_sim_V, tax_cosine_sim_M, theme_cosine_sim_M)
df.triad_V <- df.resp_V %>%
filter(stim_type == "triad",
responses != "NA")
triad_cues_V <- read.csv("../../data/corpus/cue_renamed_V.csv")
df.triad_V <- left_join(df.triad_V, triad_cues_V, by = c("cue", "top_opt", "bottom_opt"))
df.triad_V <- inner_join(df.triad_V, df.corpus, by = "Cue_renamed")
df.triad_V <- df.triad_V %>%
mutate(responses_theme = ifelse(responses == theme_match_V, 1, 0),
language = "Vietnamese",
country = "Vietnam") %>%
select(subject, rt, Cue_renamed, cue, top_opt, bottom_opt,
responses, responses_theme, country, language,
tax_match_E, theme_match_E, tax_match_V, theme_match_V, tax_match_M, theme_match_M,
tax_frequency_E, theme_frequency_E, tax_frequency_V, theme_frequency_V, tax_frequency_M, theme_frequency_M,
tax_cosine_E, theme_cosine_E, tax_cosine_V, theme_cosine_V, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_E, theme_cosine_sim_E, tax_cosine_sim_V, theme_cosine_sim_V, tax_cosine_sim_M, theme_cosine_sim_M)
df.triad_M <- df.resp_M %>%
filter(stim_type == "triad",
responses != "NA")
triad_cues_M <- read.csv("../../data/corpus/cue_renamed_M.csv")
df.triad_M <- left_join(df.triad_M, triad_cues_M, by = c("cue", "top_opt", "bottom_opt"))
df.triad_M <- inner_join(df.triad_M, df.corpus, by = "Cue_renamed")
df.triad_M <- df.triad_M %>%
mutate(responses_theme = ifelse(responses == theme_match_M, 1, 0),
language = "Mandarin",
country = "China") %>%
select(subject, rt, Cue_renamed, cue, top_opt, bottom_opt,
responses, responses_theme, country, language,
tax_match_E, theme_match_E, tax_match_V, theme_match_V, tax_match_M, theme_match_M,
tax_frequency_E, theme_frequency_E, tax_frequency_V, theme_frequency_V, tax_frequency_M, theme_frequency_M,
tax_cosine_E, theme_cosine_E, tax_cosine_V, theme_cosine_V, tax_cosine_M, theme_cosine_M,
tax_cosine_sim_E, theme_cosine_sim_E, tax_cosine_sim_V, theme_cosine_sim_V, tax_cosine_sim_M, theme_cosine_sim_M)
#calculate proportion for raw frequencies and cosine distance
df <- rbind(df.triad_E, df.triad_V)
df <- rbind(df, df.triad_M) %>%
mutate(theme_freq_prop_E = theme_frequency_E / (theme_frequency_E + tax_frequency_E),
theme_freq_prop_V = theme_frequency_V / (theme_frequency_V + tax_frequency_V),
theme_freq_prop_M = theme_frequency_M / (theme_frequency_M + tax_frequency_M),
theme_cosine_prop_E = theme_cosine_E / (theme_cosine_E + tax_cosine_E),
theme_cosine_prop_V = theme_cosine_V / (theme_cosine_V + tax_cosine_V),
theme_cosine_prop_M = theme_cosine_M / (theme_cosine_M + tax_cosine_M)) %>%
rename(triad = Cue_renamed)
df_main_analysis <- df #keep a copy of df in case exploratory analysis changes it
write.csv(df_main_analysis, "../../data/data_USCNVN_ENZHVI.csv")
